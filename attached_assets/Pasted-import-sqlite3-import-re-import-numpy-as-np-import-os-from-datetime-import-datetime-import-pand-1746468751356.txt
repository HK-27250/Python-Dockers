import sqlite3
import re
import numpy as np
import os
from datetime import datetime
import pandas as pd
import cv2
import face_recognition

# Setting up database:
def setup_database():
    connection = sqlite3.connect('attendance.db')
    cursor = connection.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            roll_no TEXT UNIQUE NOT NULL,
            class TEXT
        )
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS attendance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER,
            date TEXT NOT NULL,
            status TEXT NOT NULL,
            FOREIGN KEY (student_id) REFERENCES students(id)
        )
    ''')
    
    connection.commit()
    connection.close()
    print("✅ Database setup complete")

def register_student():
    """
    Registers a new student by:
    1. Taking input (name, roll number, class)
    2. Validating format
    3. Checking for duplicates
    4. Saving to database
    """
    print("\n" + "="*40)
    print("STUDENT REGISTRATION")
    print("="*40)

    # Input validation loop for name
    while True:
        name = input("Enter student's full name: ").strip()
        if not name.replace(" ", "").isalpha():
            print("❌ Error: Name should contain only letters and spaces")
            continue
        break

    # Input validation loop for roll number
    while True:
        roll_no = input("Enter roll number: ").strip()
        if not roll_no.isalnum():
            print("❌ Error: Roll number should be alphanumeric")
            continue
        break

    class_name = input("Enter class/section: ").strip()

    conn = None  # Initialize connection variable
    try:
        conn = sqlite3.connect('attendance.db')
        cursor = conn.cursor()

        # Check if roll number already exists
        cursor.execute("SELECT 1 FROM students WHERE roll_no = ?", (roll_no,))
        if cursor.fetchone():
            print(f"❌ Roll number {roll_no} already exists!")
            return

        # Insert new student
        cursor.execute(
            "INSERT INTO students (name, roll_no, class) VALUES (?, ?, ?)",
            (name, roll_no, class_name)
        )
        conn.commit()
        print(f"✅ Successfully registered {name} (Roll: {roll_no})")

        # Ask to capture face immediately
        capture_now = input("Capture face for recognition now? (y/n): ").lower()
        if capture_now == 'y':
            capture_face(roll_no)

    except sqlite3.Error as e:
        print(f"❌ Database error: {e}")
    finally:
        if conn:
            conn.close()

def capture_face(roll_no):
    """Captures face and saves encoding"""
    # Create folder if it doesn't exist
    os.makedirs("face_encodings", exist_ok=True)
    
    cap = cv2.VideoCapture(0)
    print("\nFace Capture Instructions:")
    print("1. Face the camera directly")
    print("2. Press SPACEBAR to capture")
    print("3. Press ESC to cancel")
    
    while True:
        ret, frame = cap.read()
        cv2.imshow("Face Capture - Press SPACE", frame)
        
        key = cv2.waitKey(1)
        if key == 27:  # ESC to exit
            break
        elif key == 32:  # SPACE to capture
            # Save temporary image
            temp_path = f"temp_{roll_no}.jpg"
            cv2.imwrite(temp_path, frame)
            
            # Load and encode face
            image = face_recognition.load_image_file(temp_path)
            encodings = face_recognition.face_encodings(image)
            
            if len(encodings) > 0:
                np.save(f"face_encodings/{roll_no}.npy", encodings[0])
                print(f"✅ Face encoding saved for {roll_no}")
            else:
                print("❌ No face detected. Try again.")
            
            os.remove(temp_path)  # Cleanup
            break
    
    cap.release()
    cv2.destroyAllWindows()

def take_attendance():
    """Matches faces and marks attendance"""
    print("\n" + "="*40)
    print("MARKING ATTENDANCE")
    print("="*40)
    
    # Load all known face encodings
    known_encodings = []
    known_roll_nos = []
    
    for file in os.listdir("face_encodings"):
        if file.endswith(".npy"):
            roll_no = file.split(".")[0]
            encoding = np.load(f"face_encodings/{file}")
            known_encodings.append(encoding)
            known_roll_nos.append(roll_no)
    
    if not known_encodings:
        print("❌ No registered faces found!")
        return
    
    # Initialize camera
    cap = cv2.VideoCapture(0)
    today = datetime.now().strftime("%Y-%m-%d")
    
    while True:
        ret, frame = cap.read()
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_frame = small_frame[:, :, ::-1]  # BGR to RGB
        
        # Detect faces
        face_locations = face_recognition.face_locations(rgb_frame)
        face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)
        
        for face_encoding in face_encodings:
            # Compare with known faces
            matches = face_recognition.compare_faces(known_encodings, face_encoding)
            if True in matches:
                matched_index = matches.index(True)
                roll_no = known_roll_nos[matched_index]
                
                # Mark attendance in database
                mark_attendance(roll_no, today)
                print(f"✅ Marked present: {roll_no}")
                
                # Visual feedback
                cv2.putText(frame, f"Present: {roll_no}", (50, 50), 
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        cv2.imshow("Attendance System - Press ESC", frame)
        if cv2.waitKey(1) == 27:  # ESC to exit
            break
    
    cap.release()
    cv2.destroyAllWindows()

def mark_attendance(roll_no, date):
    """Records attendance in database"""
    conn = sqlite3.connect('attendance.db')
    cursor = conn.cursor()
    
    try:
        # Get student ID
        cursor.execute("SELECT id FROM students WHERE roll_no = ?", (roll_no,))
        student_id = cursor.fetchone()[0]
        
        # Insert attendance record
        cursor.execute(
            "INSERT INTO attendance (student_id, date, status) VALUES (?, ?, ?)",
            (student_id, date, "Present")
        )
        conn.commit()
    except sqlite3.Error as e:
        print(f"❌ Database error: {e}")
    finally:
        conn.close()

def generate_report(date=None):
    """Exports attendance data to Excel"""
    conn = sqlite3.connect('attendance.db')
    
    if date is None:
        date = datetime.now().strftime("%Y-%m-%d")
    
    query = """
    SELECT s.name, s.roll_no, s.class, a.status
    FROM students s
    LEFT JOIN attendance a ON s.id = a.student_id AND a.date = ?
    """
    
    df = pd.read_sql_query(query, conn, params=(date,))
    df['status'] = df['status'].fillna("Absent")
    
    filename = f"Attendance_Report_{date}.xlsx"
    df.to_excel(filename, index=False)
    
    print(f"✅ Report generated: {filename}")
    conn.close()




if __name__ == "__main__":
    setup_database()
    
    while True:
        print("\n" + "="*40)
        print("ATTENDANCE SYSTEM MENU")
        print("="*40)
        print("1. Register New Student")
        print("2. Take Attendance")
        print("3. Generate Report")
        print("4. Exit")
        
        choice = input("Select option: ")
        
        if choice == "1":
            register_student()
        elif choice == "2":
            take_attendance()
        elif choice == "3":
            generate_report()
        elif choice == "4":
            break
        else:
            print("Invalid choice!")